//Fractional-Knapsack
#include <bits/stdc++.h>

using namespace std;

bool comp(pair<int,int> a, pair<int,int> b){
    float r1 = (float)a.second/(float)a.first;
    float r2 = (float)b.second/(float)b.first;
    return r1>r2;
}

int knapsack(vector<pair<int,int>> &arr, int W, int n){
    sort(arr.begin(), arr.end(), comp);
    int ans=0;

    for(int i=0; i<n; i++){
        if(W > arr[i].first){
            ans += arr[i].second;
            W -= arr[i].first;
        }
        else{
            ans += (arr[i].second / arr[i].first) * W;
            break;
        }
    }
    return ans;
}


int main()
{

    vector<pair<int,int>> arr;
    arr.push_back({2,100});//50
    arr.push_back({3,80});//26.6
    arr.push_back({5,160});//32
    arr.push_back({4,90});//32
    int W = 12;
    cout<<knapsack(arr,W,arr.size());

    return 0;
}

time complexity = n(for array iteration) + nlogn(for sorting) = nlogn